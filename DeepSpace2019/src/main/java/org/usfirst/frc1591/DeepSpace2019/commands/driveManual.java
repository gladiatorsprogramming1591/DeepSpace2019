// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.DeepSpace2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1591.DeepSpace2019.Robot;

/**
 *
 */
public class driveManual extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driveManual() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.AHRS.reset();
    }

        boolean slow;

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    if (Robot.oi.driveStick.getRawButtonPressed(8)) {
        slow = true;
    } else if (Robot.oi.driveStick.getRawButtonReleased(8)) {
        slow = false;
    }
    
        if((Robot.oi.driveStick.getMagnitude() > .05) && !slow){
            double strafe = Robot.oi.driveStick.getX();
            double vertical = Robot.oi.driveStick.getY();
            double rotation = Robot.oi.driveStick.getRawAxis(2);
            double gyroDeg = Robot.AHRS.getAngle();
            Robot.driveTrain.fieldDrive(strafe, vertical, rotation, gyroDeg);
        }   else if((Robot.oi.driveStick.getMagnitude() > .05) && slow){
                double strafe = Robot.oi.driveStick.getX();
                double vertical = Robot.oi.driveStick.getY();
                double rotation = Robot.oi.driveStick.getRawAxis(2);
                double gyroDeg = Robot.AHRS.getAngle();
                Robot.driveTrain.slowfieldDrive(strafe, vertical, rotation, gyroDeg);
        }   else if(Robot.oi.driveStick.getMagnitude() < .05){
                Robot.driveTrain.fieldDrive(0, 0, 0, 0);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
